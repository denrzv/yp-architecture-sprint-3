@startuml
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

title Диаграмма контейнеров для Smart Home Company

SHOW_PERSON_OUTLINE()
AddElementTag("microService", $shape=EightSidedShape(), $bgColor="CornflowerBlue", $fontColor="white", $legendText="micro service\neight sided")
AddElementTag("storage", $shape=RoundedBoxShape(), $bgColor="lightSkyBlue", $fontColor="white")

Boundary(home, "Дом пользователя", "удалённый объект") {
    Person_Ext(user, "Пользователь", "Управляет умным домом")
    System_Ext(module, "Умный модуль", "Выполняет определённый функционал, например, управление светом")
}

Enterprise_Boundary(company, "Smart Home Company") {
    Person(admin, "Администратор", "Управляет системой")
    System(smarthome_system, "Smart Home System", "Система управления умными домами")

    Container_Boundary(smarthome_system, "Smart Home System") {
        Boundary(gui, "Пользовательские интерфейсы", "внешняя разработка") {
            Container(spa, "Single-Page App", "JavaScript, Angular", "Веб приложение для пользователей и администраторов")
            Container(mobile_app, "Mobile App", "C#, Xamarin", "Мобильное приложение для пользователей")
        }

        Boundary(kubernetes, "Платформа контейнеризации", "Kubernetes") {
            Container(telemetry_service, "Сервис телеметрии", "Spring Boot", "Обрабатывает телеметрию и хранит историю", $tags="microService")
            ContainerDb(telemetry_db, "БД телеметрии", "PostgreSQL", "Телеметрия")
            Rel(telemetry_service, telemetry_db, "Хранит и читает данные", "SQL")

            Container(module_service, "Сервис управления модулями", "Spring Boot/PostgreSQL", "Управляет модулями, регистрацией", $tags="microService")
            ContainerDb(module_service_db, "БД сервиса управления", "PostgreSQL", "Данные модулей")
            Rel(module_service, module_service_db, "Хранит и читает данные", "SQL")

            Container(payment_service, "Сервис обработки платежей", "Spring Boot/PostgreSQL", "Обработка платежей", $tags="microService")
            ContainerDb(payment_service_db, "БД телеметрии", "PostgreSQL", "Платёжные данные")
            Rel(payment_service, payment_service_db, "Хранит и читает данные", "SQL")

            Container(user_service, "Сервис управления пользователями", "Spring Boot/PostgreSQL", "Регистрация и управление пользователями", $tags="microService")
            ContainerDb(user_service_db, "БД управления пользователями", "PostgreSQL", "Пользовательские данные")
            Rel(user_service, user_service_db, "Хранит и читает данные", "SQL")

            Container(event_storage, "Сервис хранения и обработки событий", "Spring Boot/PostgreSQL", "Хранение истории событий и состояния агрегатов", $tags="microService")
            Container(audit_store, "Audit Store", "Event Store", "Хранит все события для аудита действий", $tags="storage")
            Rel(event_storage, audit_store, "Хранит и читает данные", "SQL")
        }



        Container(apigw, "API шлюз", "Обработка запросов")
        Container(broker, "Kafka брокер", "Хранение сообщений")
        Container(service_mesh, "Istio", "Сетевой слой между сервисами")
        Container(elk, "ELK", "Сбор логов, хранение, визуализация")
        Container(prometheus, "Prometheus", "Сбор метрик работы сервисов")
        Container(grafana, "Grafana", "Визуализация данных и алёртинг")
    }
}

System_Ext(payment_provider, "Платёжный провайдер", "Обработка платежей")
System_Ext(github_cicd, "GitHub CI/CD", "Обработка пайпланов для сборки, тестирования и деплоя сервисов")

' Взаимодействие администратора

Rel(admin, spa, "Управление системой", "HTTPS")
Rel(admin, elk, "Анализ работы системы", "HTTPS")
Rel(admin, grafana, "Анализ работы системы", "HTTPS")

' Взаимодействие пользователя

Rel(user, spa, "Управление домом", "HTTPS")
Rel(user, mobile_app, "Управление домом", "HTTPS")
Rel(user, module, "Установка и настройка")

Rel(mobile_app, apigw, "Взаимодействие с сервисами", "HTTPS/API")
Rel(spa, apigw, "Взаимодействие с сервисами", "HTTPS/API")

' Взаимодействие с API GW

Rel(apigw, kubernetes, "Взаимодействие с сервисами", "HTTPS/API")

' Связность с брокером

Rel(kubernetes, broker, "Считывание и отправка сообщений", "TCP/SSL")

' Связность с ELK

Rel(kubernetes, elk, "Отгрузка логов", "HTTPS")

' Связность с Istio

Rel(kubernetes, service_mesh, "Управление коммуникацией сервисов", "HTTPS")

' Связность CI/CD

Rel(github_cicd, kubernetes, "Развёртывание и откаты сервисов", "HTTPS")

Rel(payment_service, payment_provider, "Обработка платежей", "HTTPS/API")

' Мониторинг

Rel(grafana, prometheus, "Получение данных", "https")
Rel(prometheus, kubernetes, "Регулярный срез метрик", "HTTPS")

@enduml